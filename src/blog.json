[
    {
        "id": 1,
        "title": "Difference between do while and while loop",
        "description": "<p class='mb-5'> Coding ရေးကြတဲ့အခါ သင့်တော်တဲ့ နည်းစနစ်ကို အသုံးပြုကြရပါတယ်။ အဖြေတစ်ခုရဖို့ အဆင်အပြေဆုံး နည်းလမ်းကို ရှာဖွေကြတာပေါ့။ ဒီ blog မှာတော့ do while နဲ့ while loop နှစ်မျိုးအကြောင်း ပြောသွားမှာပါ။ </p> <p class='mb-5'> ဒီ program က o နဲ့ . ကို တစ်လှည့်စီ ထုတ်ပြမှာပါ။ ဘယ်နှစ်ကြိမ်ထုတ်ပြမှာလဲဆိုတာကို num ဆိုတဲ့ variable နဲ့ သတ်မှတ်ပေးလိုက်ပါတယ်။ တကယ်လို့ num က 0 ဒါမှမဟုတ် 0 အောက်ငယ်မယ်ဆိုရင် ဘာမှထုတ်မပြဘူးလို့ ဆုံးဖြတ်ထားပါတယ်။ ဆိုတော့ ဘယ်နည်းကိုသုံးပြီး loop ပတ်မလဲဆိုတာ စဉ်းစားကြပါမယ်။ </p> <div class='block lg:flex justify-evenly mb-5 gap-4'> <div class='lg:w-6/12'> <div class='mockup-code'> <pre data-prefix='1'> <code>public static void printDots(int num) {</code> </pre> <pre data-prefix='2'> <code> int cnt = 0;</code> </pre> <pre data-prefix='3'> <code> String dotColor = &quot;DC1&quot;;</code> </pre> <pre data-prefix='4'> <code> do {</code> </pre> <pre data-prefix='5'> <code> \tif (dotColor.equals(&quot;DC1&quot;)) { </code> </pre> <pre data-prefix='6'> <code> \t System.out.print(&quot;o&quot;); </code> </pre> <pre data-prefix='7'> <code> \t dotColor = &quot;DC2&quot;; </code> </pre> <pre data-prefix='8'> <code> \t } else { </code> </pre> <pre data-prefix='9'> <code> \t System.out.print(&quot;.&quot;); </code> </pre> <pre data-prefix='10'> <code> \t dotColor = &quot;DC1&quot;;</code> </pre> <pre data-prefix='11'> <code> \t } </code> </pre> <pre data-prefix='12'> <code> \tcnt++; </code> </pre> <pre data-prefix='13'> <code> } while (cnt < num); </code> </pre> <pre data-prefix='14'> <code> System.out.println();</code> </pre> <pre data-prefix='15'> <code>}</code> </pre> <pre data-prefix='16'> <code> </code> </pre> <pre data-prefix='17'> <code>public static void main(String[] args) {</code> </pre> <pre data-prefix='18' class='bg-base-100'> <code> printDots(0); <b class='text-gray-500'> { output : o } </b> </code> </pre> <pre data-prefix='19' class='bg-base-100'> <code> printDots(5); <b class='text-gray-500'> { output : o.o.o } </b> </code> </pre> <pre data-prefix='20'> <code>}</code> </pre> </div> </div> <div class='lg:w-6/12'> <b>Do While Loop</b> <p class='my-5'> Do While Loop ကတော့ စစချင်းမှာ condition ကို မစစ်ပဲ တစ်ကြိမ်တော့ run ပါတယ်။ ဒါကြောင့် ပထမဆုံး printDots function ကို ခေါ်လိုက်တဲ့အချိန်မှာ 0 ပေးလိုက်ပေမယ့် သူက condition ကို အရင်မစစ်လို့ တစ်ကြိမ် run ပြီး o ကို ထုတ်ပြပါတယ်။ ထုတ်ပြပြီးမှ cnt ကို တစ်တိုးပြီး cnt က num အောက်ငယ်လားစစ်ပါတယ်။ cnt က 1 ဖြစ်ပြီး num က 0 ဖြစ်နေတဲ့အတွက် loop ကို အဆုံးသတ်လိုက်ပါတယ်။ </p> <p> နောက်တစ်ခါ printDots function ကို ခေါ်လိုက်တဲ့အချိန်မှာ 5 ပေးလိုက်ပါတယ်။ ဒီတစ်ခါမှာတော့ သူက တစ်ခါ run ပြီးတဲ့အချိန်မှာ cnt ကို တစ်ပေါင်းပြီး num အောက်ငယ်မငယ် စစ်ပြီး ငယ်တဲ့အတွက် နောက်တစ်ခါ ထပ်ပတ်ပါတယ်။ ဒီလိုနဲ့ နောက်ဆုံးမှာ cnt က 5 နဲ့ ညီသွားတဲ့အတွက် loop ပတ်တာကိုရပ်လိုက်ပါတယ်။ </p> </div> </div> <div class='block lg:flex justify-evenly mb-5 gap-4'> <div class='lg:w-6/12'> <b>While Loop</b> <p class='my-5'> While Loop ကတော့ စစချင်းမှာ condition ကို စစ်ပါတယ်။ ဒါကြောင့် ပထမဆုံး printDots function ကို ခေါ်လိုက်တဲ့အချိန်မှာ 0 ပေးလိုက်လို့ ဘာကိုမှ ထုတ်ပြမှာ မဟုတ်တော့ပါဘူး။ cnt က 0 ဖြစ်ပြီး num က 0 ဖြစ်နေတဲ့အတွက် loop ကို အဆုံးသတ်လိုက်ပါတယ်။ </p> <p> နောက်တစ်ခါ printDots function ကို ခေါ်လိုက်တဲ့အချိန်မှာ 5 ပေးလိုက်ပါတယ်။ cnt က 0 ဖြစ်ပြီး num က 5 ဖြစ်နေတဲ့အတွက် loop ကို စပတ်ပါတယ် တစ်ခါပတ်ပြီးတိုင်း cnt ကို တစ်တိုးပါတယ်။ ဒီလိုနဲ့ နောက်ဆုံးမှာ cnt က 5 နဲ့ ညီသွားတဲ့အတွက် loop ပတ်တာကိုရပ်လိုက်ပါတယ်။ </p> </div> <div class='lg:w-6/12'> <div class='mockup-code'> <pre data-prefix='1'> <code>public static void printDots(int num) {</code> </pre> <pre data-prefix='2'> <code> int cnt = 0;</code> </pre> <pre data-prefix='3'> <code> String dotColor = &quot;DC1&quot;;</code> </pre> <pre data-prefix='4'> <code> while (cnt < num) {   </code> </pre> <pre data-prefix='5'>   <code> \tif (dotColor.equals(&quot;DC1&quot;)) {   </code> </pre> <pre data-prefix='6'>   <code> \t System.out.print(&quot;o&quot;); </code> </pre> <pre data-prefix='7'>   <code> \t dotColor = &quot;DC2&quot;; </code> </pre> <pre data-prefix='8'> <code>  \t } else { </code> </pre> <pre data-prefix='9'> <code> \t System.out.print(&quot;.&quot;); </code> </pre> <pre data-prefix='10'> <code> \t dotColor = &quot;DC1&quot;;</code> </pre> <pre data-prefix='11'> <code>  \t } </code> </pre> <pre data-prefix='12'> <code> \tcnt++; </code> </pre> <pre data-prefix='13'> </pre> <pre data-prefix='14'> <code> System.out.println();</code> </pre> <pre data-prefix='15'> <code>}</code> </pre> <pre data-prefix='16'> <code> </code> </pre> <pre data-prefix='17'> <code>public static void main(String[] args) {</code> </pre> <pre data-prefix='18' class='bg-base-100'> <code>  printDots(0); <b class='text-gray-500'> { output : } </b>  </code> </pre> <pre data-prefix='19' class='bg-base-100'> <code>  printDots(5); <b class='text-gray-500'> { output : o.o.o } </b> </code> </pre> <pre data-prefix='20'> <code>}</code> </pre> </div> </div> </div> <p> ဒါကြောင့် ဒီ program မှာ ကျွန်တော်တို့က while ကို သုံးပြီး loop ပတ်ရမှာဖြစ်ပါတယ်။ ဒါမှသာ num 0 ဖြစ်နေတဲ့အချိန်မှာ output ထုတ်မပြမှာဖြစ်ပါတယ်။ ဒီလောက်ဆိုရင် while နဲ့ do while ရဲ့ အသုံးကွဲပြားပုံကို မြင်ကြမယ်လို့ထင်ပါတယ်။ </p>",
        "date": "Oct 15, 2024",
        "url": "/blog/blog_one.png"
    }
]

